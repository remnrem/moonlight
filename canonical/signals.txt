
% -------------------------------------------------------------------------
% NSRR harmonized EDF canonical signal definitions: unit definitions
% version v2.0, 7-Apr-2022
% -------------------------------------------------------------------------

% nb. first entry is always the preferred term

% Voltage units (first entry of list is the preferred term)

let volt  = V,volt

let mvolt = mV,millivolt,milli-volt,mvolt,m-volt

let uvolt = uV,microvolt,micro-volt,uvolt,u-volt


% -------------------------------------------------------------------------
% NSRR harmonized EDF canonical signal definitions: electroencephalography (EEG)
% version v2.0, 7-Apr-2022
% -------------------------------------------------------------------------

% -------------------------------------------------------------------------
%
% Variable definitions 
%
% -------------------------------------------------------------------------

% left mastoids
let left_mastoid=M1,M1_ref,M1-ref,EEG_M1,EEG_M1_REF,EEG_M1-REF
let left_mastoid=A1,A1_ref,A1-ref,EEG_A1,EEG_A1_REF,EEG_A1-REF

% right mastoids
let right_mastoid=M2,M2_ref,M2-ref,EEG_M2,EEG_M2_REF,EEG_M2-REF
let right_mastoid=A2,A2,A2_ref,A2-ref,EEG_A2,EEG_A2_REF,EEG_A2-REF

% linked mastoids (pre-computed)
let linked_mastoid=M1M2,A1A2,(M1+M2)/2,(A1+A2)/2,M1+M2,A1+A2

% linked mastoids (computed on-the-fly) nb. quoted "L,R" syntax
let linked_mastoid="M1,M2","M1_REF,M2_REF","M1-REF,M2-REF"
let linked_mastoid="EEG_M1,EEG_M2","EEG_M1_REF,EEG_M2_REF","EEG_M1-REF,EEG_M2-REF"
let linked_mastoid="A1,A2","A1_REF,A2_REF","A1-REF,A2-REF"
let linked_mastoid="EEG_A1,EEG_A2","EEG_A1_REF,EEG_A2_REF","EEG_A1-REF,EEG_A2-REF"

% channel w/ arbitrary recording reference
let left_central=C3,C3-ref,C3_ref,EEG_C3,EEG_C3_ref,EEG_C3-ref
let right_central=C4,C4-ref,C4_ref,EEG_C4,EEG_C4_ref,EEG_C4-ref
let midline_central=CZ,CZ-ref,CZ_ref,EEG_CZ,EEG_CZ_ref,EEG_CZ-ref

let left_frontal=F3,F3-ref,F3_ref,EEG_F3,EEG_F3_ref,EEG_F3-ref
let right_frontal=F4,F4-ref,F4_ref,EEG_F4,EEG_F4_ref,EEG_F4-ref
let midline_frontal=FZ,FZ-ref,FZ_ref,EEG_FZ,EEG_FZ_ref,EEG_FZ-ref

let left_parietal=P3,P3-ref,P3_ref,EEG_P3,EEG_P3_ref,EEG_P3-ref
let right_parietal=P4,P4-ref,P4_ref,EEG_P4,EEG_P4_ref,EEG_P4-ref
let midline_parietal=PZ,PZ-ref,PZ_ref,EEG_PZ,EEG_PZ_ref,EEG_PZ-ref

let left_temporal=T3,T3-ref,T3_ref,EEG_T3,EEG_T3_ref,EEG_T3-ref
let right_temporal=T4,T4-ref,T4_ref,EEG_T4,EEG_T4_ref,EEG_T4-ref
let midline_temporal=TZ,TZ-ref,TZ_ref,EEG_TZ,EEG_TZ_ref,EEG_TZ-ref

let left_occipital=O1,O1-ref,O1_ref,EEG_O1,EEG_O1_ref,EEG_O1-ref
let right_occipital=O2,O2-ref,O2_ref,EEG_O2,EEG_O2_ref,EEG_O2-ref
let midline_occipital=OZ,OZ-ref,OZ_ref,EEG_OZ,EEG_OZ_ref,EEG_OZ-ref

% pre-computed CM-referenced centrals (e.g. C3_M2)
let left_central_cm_ref=C3_M2,C3-M2,C3/M2,EEG_C3-M2,EEG_C3_M2,EEG_C3/M2
let left_central_cm_ref=C3_A2,C3-A2,C3/A2,EEG_C3-A2,EEG_C3_A2,EEG_C3/A2
let right_central_cm_ref=C4_M1,C4-M1,C4/M1,EEG_C4-M1,EEG_C4_M1,EEG_C4/M1
let right_central_cm_ref=C4_A1,C4-A1,C4/A1,EEG_C4-A1,EEG_C4_A1,EEG_C4/A1

let left_frontal_cm_ref=F3_M2,F3-M2,F3/M2,EEG_F3-M2,EEG_F3_M2,EEG_F3/M2
let left_frontal_cm_ref=F3_A2,F3-A2,F3/A2,EEG_F3-A2,EEG_F3_A2,EEG_F3/A2
let right_frontal_cm_ref=F4_M1,F4-M1,F4/M1,EEG_F4-M1,EEG_F4_M1,EEG_F4/M1
let right_frontal_cm_ref=F4_A1,F4-A1,F4/A1,EEG_F4-A1,EEG_F4_A1,EEG_F4/A1

let left_parietal_cm_ref=P3_M2,P3-M2,P3/M2,EEG_P3-M2,EEG_P3_M2,EEG_P3/M2
let left_parietal_cm_ref=P3_A2,P3-A2,P3/A2,EEG_P3-A2,EEG_P3_A2,EEG_P3/A2
let right_parietal_cm_ref=P4_M1,P4-M1,P4/M1,EEG_P4-M1,EEG_P4_M1,EEG_P4/M1
let right_parietal_cm_ref=P4_A1,P4-A1,P4/A1,EEG_P4-A1,EEG_P4_A1,EEG_P4/A1

let left_temporal_cm_ref=T3_M2,T3-M2,T3/M2,EEG_T3-M2,EEG_T3_M2,EEG_T3/M2
let left_temporal_cm_ref=T3_A2,T3-A2,T3/A2,EEG_T3-A2,EEG_T3_A2,EEG_T3/A2
let right_temporal_cm_ref=T4_M1,T4-M1,T4/M1,EEG_T4-M1,EEG_T4_M1,EEG_T4/M1
let right_temporal_cm_ref=T4_A1,T4-A1,T4/A1,EEG_T4-A1,EEG_T4_A1,EEG_T4/A1

let left_occipital_cm_ref=O1_M2,O1-M2,O1/M2,EEG_O1-M2,EEG_O1_M2,EEG_O1/M2
let left_occipital_cm_ref=O1_A2,O1-A2,O1/A2,EEG_O1-A2,EEG_O1_A2,EEG_O1/A2
let right_occipital_cm_ref=O2_M1,O2-M1,O2/M1,EEG_O2-M1,EEG_O2_M1,EEG_O2/M1
let right_occipital_cm_ref=O2_A1,O2-A1,O2/A1,EEG_O2-A1,EEG_O2_A1,EEG_O2/A1


% pre-computed LM-referenced central (e.g. C3_LM)
let left_central_lm_ref=C3_LM,C3-LM,C3/LM,EEG_C3-LM,EEG_C3_LM,EEG_C3/LM
let right_central_lm_ref=C4_LM,C4-LM,C4/LM,EEG_C4-LM,EEG_C4_LM,EEG_C4/LM
let midline_central_lm_ref=CZ_LM,CZ-LM,CZ/LM,EEG_CZ-LM,EEG_CZ_LM,EEG_CZ/LM

let left_frontal_lm_ref=F3_LM,F3-LM,F3/LM,EEG_F3-LM,EEG_F3_LM,EEG_F3/LM
let right_frontal_lm_ref=F4_LM,F4-LM,F4/LM,EEG_F4-LM,EEG_F4_LM,EEG_F4/LM
let midline_frontal_lm_ref=FZ_LM,FZ-LM,FZ/LM,EEG_FZ-LM,EEG_FZ_LM,EEG_FZ/LM

let left_parietal_lm_ref=P3_LM,P3-LM,P3/LM,EEG_P3-LM,EEG_P3_LM,EEG_P3/LM
let right_parietal_lm_ref=P4_LM,P4-LM,P4/LM,EEG_P4-LM,EEG_P4_LM,EEG_P4/LM
let midline_parietal_lm_ref=PZ_LM,PZ-LM,PZ/LM,EEG_PZ-LM,EEG_PZ_LM,EEG_PZ/LM

let left_temporal_lm_ref=T3_LM,T3-LM,T3/LM,EEG_T3-LM,EEG_T3_LM,EEG_T3/LM
let right_temporal_lm_ref=T4_LM,T4-LM,T4/LM,EEG_T4-LM,EEG_T4_LM,EEG_T4/LM
let midline_temporal_lm_ref=TZ_LM,TZ-LM,TZ/LM,EEG_TZ-LM,EEG_TZ_LM,EEG_TZ/LM

let left_occipital_lm_ref=O1_LM,O1-LM,O1/LM,EEG_O1-LM,EEG_O1_LM,EEG_O1/LM
let right_occipital_lm_ref=O2_LM,O2-LM,O2/LM,EEG_O2-LM,EEG_O2_LM,EEG_O2/LM
let midline_occipital_lm_ref=OZ_LM,OZ-LM,OZ/LM,EEG_OZ-LM,EEG_OZ_LM,EEG_OZ/LM


% -------------------------------------------------------------------------
%
% Rules
%
% -------------------------------------------------------------------------

%
% central CM-referenced
%

C3_M2
 req:
  sig = left_central_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C3_M2
 req:
  sig = left_central
  ref = right_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_M1
 req:
  sig = right_central_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_M1
 req:
  sig = right_central
  ref = left_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

%
% central LM-referenced
%

C3_LM
 req:
  sig = left_central_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C3_LM
 req:
  sig = left_central
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_LM
 req:
  sig = right_central_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

C4_LM
 req:
  sig = right_central
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


%
% Frontals
%

F3_M2
 req:
  sig = left_frontal_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F3_M2
 req:
  sig = left_frontal
  ref = right_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_M1
 req:
  sig = right_frontal_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_M1
 req:
  sig = right_frontal
  ref = left_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

%
% frontal LM-referenced
%

F3_LM
 req:
  sig = left_frontal_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F3_LM
 req:
  sig = left_frontal
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_LM
 req:
  sig = right_frontal_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

F4_LM
 req:
  sig = right_frontal
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


%
% Occipitals
%

O1_M2
 req:
  sig = left_occipital_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O1_M2
 req:
  sig = left_occipital
  ref = right_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_M1
 req:
  sig = right_occipital_cm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_M1
 req:
  sig = right_occipital
  ref = left_mastoid
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

%
% occipital LM-referenced
%

O1_LM
 req:
  sig = left_occipital_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O1_LM
 req:
  sig = left_occipital
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_LM
 req:
  sig = right_occipital_lm_ref
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

O2_LM
 req:
  sig = right_occipital
  ref = linked_mastoid 
  unit = volt
  unit = mvolt	
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


%
% Midline LM-referenced channels
%

CZ_LM
 req:
  sig = midline_central_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

CZ_LM
 req:
  sig = midline_central
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% frontal

FZ_LM
 req:
  sig = midline_frontal_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

FZ_LM
 req:
  sig = midline_frontal
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV


% parietal

PZ_LM
 req:
  sig = midline_parietal_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

PZ_LM
 req:
  sig = midline_parietal
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  trans = xyz,*
  scale = AC
 set:
  unit = uV

% occipital

OZ_LM
 req:
  sig = midline_occipital_lm_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

OZ_LM
 req:
  sig = midline_occipital
  ref = linked_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

% -------------------------------------------------------------------------
%
% EOG channels; preferred both referenced against M2
%
% -------------------------------------------------------------------------

%% aliases

% EOG against recording reference
let left_eog=E1,E1,LOC,EOG-L,L-EOG,EOG_Left,EOG_L,LEOG,EOG(L)
let left_eog=EEG_E1,EOG_E1
let left_eog=EOG_L_Ref

let right_eog=E2,ROC,EOG-R,R-EOG,EOG_Right,EOG_R,REOG,EOG(R)
let right_eog=EEG_E2,EOG_E2
let right_eog=EOG_R_Ref

% EOG against *right* mastoid ref
let left_eog_right_mastoid_ref=E1_M2,E1-M2,E1_M2,E1_A2,E1-A2
let left_eog_right_mastoid_ref=EOG_LOC-M2,EOG_LOC_M2,LOC/M2,LOC-M2,LOC_M2,EOGL-M2
let left_eog_right_mastoid_ref=EOG_LOC-A2,EOG_LOC_A2,LOC/A2,LOC-A2,LOC_A2,EOGL-A2
let left_eog_right_mastoid_ref=LOC_A2,LOC_M2

let right_eog_right_mastoid_ref=E2_M2,E2-M2,E2_M2,E2_A2,E2-A2
let right_eog_right_mastoid_ref=EOG_ROC-M2,EOG_ROC_M2,ROC/M2,ROC-M2,ROC_M2,EOGR-M2
let right_eog_right_mastoid_ref=EOG_ROC-A2,EOG_ROC_A2,ROC/A2,ROC-A2,ROC_A2,EOGR-A2
let right_eog_right_mastoid_ref=ROC_A2,ROC_M2

% also include right EOG against left ref.
let right_eog_left_mastoid_ref=E2_M1,E2-M1,E2_M1,E2_A1,E2-A1
let right_eog_left_mastoid_ref=EOG_ROC-M1,EOG_ROC_M1,ROC/M1,ROC-M1,ROC_M1,EOGR-M1
let right_eog_left_mastoid_ref=EOG_ROC-A1,EOG_ROC_A1,ROC/A1,ROC-A1,ROC_A1,EOGR-A1
let right_eog_left_mastoid_ref=ROC_A1,ROC_M1

%% rules
% AASM standard has LOC and ROC both referenced against M2
% but include E2_M1 as a replacement for E2-M2, if the latter is not available

LOC
 req:
  sig = left_eog_right_mastoid_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

LOC
 req:
  sig = left_eog
  ref = right_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

LOC
 req:
  sig = left_eog
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

% ROC - preferred also against right M2

ROC
 req:
  sig = right_eog_right_mastoid_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

ROC
 req:
  sig = right_eog
  ref = right_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

% ROC - alternativly, against left M1

ROC
 req:
  sig = right_eog_left_mastoid_ref
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

ROC
 req:
  sig = right_eog
  ref = left_mastoid
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

% also, if no mastoids present, assume any match is
% already re-referenced, even if that is not explicit in
% the name

LOC
 req:
  sig = left_eog
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

ROC
 req:
  sig = right_eog
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 50
  scale = AC
 set:
  unit = uV

% -------------------------------------------------------------------------
%
% Surface electromyography (EMG) 
%   - assumes 1,2,3 = C,L,R
%   - assumes L-R and R-L are equivalent
%
% -------------------------------------------------------------------------

let central_chin=EMG1,Chin1,Chin1_EMG,Chin-C,EMG/C,C_Chin,CCHin,Chin-Ctr
let left_chin=EMG2,Chin2,Chin2_EMG,Chin-L,EMG/L,L_Chin,LChin
let right_chin=EMG3,Chin3,Chin3_EMG,Chin-R,EMG/R,R_Chin,RChin

let chin_left_central=chinI,Chin1-Chin2,Chin_1-Chin_2,EMG1-EMG2,EMG_Chin1-Chin2,CChin-LChin,C_Chin-L_Chin,EMG_Chin1_Chin2
let chin_left_central=Chin2-Chin1,Chin_2-Chin_1,EMG2-EMG1,EMG_Chin2-Chin1,LChin-CChin,L_Chin-C_Chin,EMG_Chin2_Chin1

let chin_right_central=chinII,Chin1-Chin3,Chin_1-Chin_3,EMG1-EMG3,EMG_Chin1-Chin3,CChin-RChin,C_Chin-R_Chin,EMG_Chin1_Chin3
let chin_right_central=Chin3-Chin1,Chin_3-Chin_1,EMG3-EMG1,EMG_Chin3-Chin1,RChin-CChin,R_Chin-C_Chin,EMG_Chin3_Chin1

let chin_left_right=chinIII,Chin2-Chin3,Chin_2-Chin_3,EMG2-EMG3,EMG_Chin2-Chin3,LChin-RChin,L_Chin-R_Chin,EMG_Chin2_Chin3
let chin_left_right=chinIII=Chin3-Chin2,Chin_3-Chin_2,EMG3-EMG2,EMG_Chin3-Chin2,RChin-LChin,R_Chin-L_Chin,EMG_Chin3_Chin2

let chin=chin,EMG,EMG_chin,Chin_EMG,Chin_EMG_Gnd,EMG_sm

EMG
 req:
  sig = chin_left_central,chin_right_central
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

EMG
 req:
  sig = left_chin,right_chin
  ref = central_chin
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

EMG
 req:
  sig = left_chin
  ref = right_chin
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV

EMG
 req:
  sig = chin
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
  scale = AC
 set:
  unit = uV
% -------------------------------------------------------------------------
%
% Electrocardiography (2 or 3-channel PSG ECG)
%
% -------------------------------------------------------------------------

% electrodes

let RA_electrode=RA,ECG1,EKG1,ECG_R,ECGR,EKGR,ECG1-REF,ECG1_REF
let LA_electrode=LA,ECG2,EKG2,ECG_L,ECGL,EKGL,ECG1-REF,ECG2_REF
let LL_electrode=LL,ECG3,EKG3,ECG_LL,ECG1-REF,ECG2_REF

% leads; if a single ECG channel present, assume lead I is bipolar  
% otherwise, create explicitly from the existing channels

let ecg_lead1=ECG_LA-RA,ECG1-ECG2

ECG
 req:
  sig = ecg_lead1
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = ECG,EKG
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = LA_electrode
  ref = RA_electrode
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = LL_electrode
  ref = RA_electrode
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV

ECG
 req:
  sig = LL_electrode
  ref = LA_electrode
  unit = volt
  unit = mvolt
  unit = uvolt
  sr-min = 100
 set:
  unit = mV



% nb. other labels observed:
% ECG_EKG2_EKG
% ECG1-ECG2,EKG1-EKG2,ECG_L-ECG_R
% ECG1,ECG_I,ECGL,ECG_L,ECGI,EKG1,EKG_I,EKGL,EKG_L,EKGI
% ECG2,ECG_II,ECGR,ECG_R,ECGII,EKG2,EKG_II,EKGR,EKG_R,EKGII
% ECG,EKG
% ECG1,ECG_L,ECGL,ECGI,ECG_I,EKGL,EKG_L,EKGI,EKG_I
% ECG2,ECG_R,ECGR,ECGII,ECG_II,EKGR,EKG_R,EKGII,EKG_II
% ECG3,ECG_V


% -------------------------------------------------------------------------
%
% Respiratory effort (thoracic and abdominal)
%
% -------------------------------------------------------------------------

let abdomen=abdomen,ABD,Abdmn,Abdo,ABDOM,Abdomen,Abd2,Abdominal
let abdomen=Effort_ABD,ABDO_EFFORT,A-Effort,Abdomen_EG,Resp_Abdominal,Abdo_Res,Resp_Abdomen
let abdomen=EEG_Abd,AbdDC,ABDM

let thorax=thorax,Thoracic,THOR_RES,Thor,Thorax_EG,THO,THOR_EFFORT,Effort_THO,Resp_Thoracic
let thorax=Chest,Chest1,Resp_Chest,EEG_Chest,RIB_CAGE,ChestDC

let sum=sum,THOR+ABDO,Sum_

% rules (note: variables are not expanded for canonical channel labels)

abdomen
 req:
  sig = abdomen
  unit=mV,uV,V,Volts,.,none
 set:
  unit=mV

thorax
 req:
  sig = thorax
  unit=mV,uV,V,Volts,.,none
 set:
  unit=mV

sum
 req:
  sig = sum
  unit=mV,uV,V,Volts,.,none
 set:
  unit=mV
  
% -------------------------------------------------------------------------
%
% Airflow: thermistor & nasal pressure cannula
%Stages St. Luke's uses Nasal_therm term for thermistor
% -------------------------------------------------------------------------

% thermistor
%chat uses PVDF, we decided to map to thermistor

let thermistor=therm,Thermistor,EEG_Therm,Thermistor_EG,AIRFLOW,nasalflow
let airflow=air,Airflow1,AIR_FLOW,Flow_EG,NasalSn,Nasal_Therm
let thermistor=oralflow,AIR,airlfow,NasOr,NasOr2


% nasal pressure transducer
% removed N_Pres and N.Press they were in the Stages cohort and were not legitimate signals

let nasal_pres=CannulaFlow,CanulaFlow,Cannula,Cannula_Flow,CannulaFow,CannnulaFlow,CannlulaFlow,
let nasal_pres=CannualFlow,CannulaNasal,Nasal_Cannula,NASAL_PRES,Nasal_Pressure
let nasal_pres=Nasal,NASAL_PRESS,Nasal_EG, PTAF
let nasal_pres=NP,Pressure,Pres,nas_pres,DC_Nasal_Canual


% Unspecified airflow channels (info may be in the transducer fields)

let airflow=flow,Flow_Patient
let airflow=Resp_Airflow,Resp_Flow,Resp_FLOW-Ref,Resp_Airflow+-Re,NasalDC
let airflow=Flow_Aux4


% rules
% TODO: add in transducer rules for generic airflow channels

thermistor
 req:
  sig = thermistor
  unit=mvolt
  unit=uvolt
  unit=unknown,.,*
  

nasal_pres
 req:
  sig = nasal_pres
  unit=mvolt
  unit=uvolt
  unit=mbar
  unit=ubar
  unit=unknown,.

nasal_pres
 req:
  sig = airflow
  unit=mbar
  unit=ubar

airflow
 unless:
  thermistor
  nasal_pres
 req:
  sig = airflow
  unit=mvolt
  unit=uvolt
  unit=unknown,.
 


% -------------------------------------------------------------------------
%
% Oxygen saturation (SpO2)
%
% -------------------------------------------------------------------------

let SpO2=SpO2,SAO2,SAT,SpO2_EG,SA02,SO02,PaO2,SPO2__2_,Sa02masimo,SA02nonin,SAO2External,Nonin_sat
let SpO2=SAO2masimo,SAO2Nellcor,SAO2ninon,SAO2noin,A_SpO2,SAO2nonin,SA02nonin,SpO2Sta,SpO2x,SpO2xx

SpO2
 req:
  sig = SpO2
  unit = percent,.,*

let Pleth=pleth,plethmasimo,plethmasino,plethnellcor,plethwv,pletmasimo,PPG

Pleth
 req:
  sig = Pleth
  unit=V
  unit=uV
  unit=mV
  unit=none,.
% -------------------------------------------------------------------------
%
% (Derived) Heart rate (BPM) 
%
% -------------------------------------------------------------------------

let HR=HR,BPM,HEARTRATE,Heart_Rate,Heart_Rate_CU,HRate,H.R.,DHR

HR
 req:
  sig = HR

% -------------------------------------------------------------------------
%
% Plethysmography (volume of blood, from oximetry signal)
%
% -------------------------------------------------------------------------
let pleth=pleth,Plethysmogram,Plesmo,PlethWV,RD-Pleth,RD-Pleth_EG,Plethmasimo,PlethMasino
let pleth=PlethNellcor,PletMasimo

pleth
 req:
  sig = pleth


% -------------------------------------------------------------------------
%
% Pulse
%
% -------------------------------------------------------------------------

let pulse=pulse,PR,Puls,Pulse_Rate,PulseRate,Pulse_EG,Pluse

pulse
 req:
  sig = pulse
% -------------------------------------------------------------------------

%

% Surface EMG monitoring of limb muscles

%

% -------------------------------------------------------------------------



% generate LAT and RAT, allowing for three transducer types

%  EMG, piezo and unknown

%

% expected EMG signals typically either have two channels per leg (which

% will need to be re-referenced to each other) or one bipolar signal

% per leg (i.e. already re-referenced). Piezo will only have one

% signal per leg





%

% Channel   + Transducer         --> Inferred type

% -------------------------------------------------

% EMG       + any/none           --> EMG

% generic   + EMG                --> EMG

% piezo     + any/none           --> piezo    (no current examples/rules)

% generic   + piezo              --> piezo

% generic   + unknown/none       --> unknown





% EMG has two leads per leg, versus piezo only has one,

% assume that channels indicating >1 lead == EMG





%

% Define generic left/right leg fields

%  (i.e. presumably piezo OR bipolar EMG)

%
let left_leg=LLEG,L_LEG,LEFT,Leg_L,LegL,Leg_Ltibial,L_Legs,LATl,LegsL_Leg1,L_Leg1,L_LEG_1
let left_leg=LLeg3,L_Leg2,L_LEG_2,LLeg4,Leg_L_LEG,LAT

let right_leg=RLEG,R_LEG,RIGHT,Leg_R,LegR,Leg_Rtibial,R_Legs,RAT,R_LEG1,RLEG1,RLeg5,RLEG_2
let right_leg=RLEG2,RLeg6

let leg=leg

let leg1=leg_1

let leg2=Leg_2

%

% EMG-specific rules (indicated by presence of >1 channel per leg in labels)

%

% 4-lead EMG channels (2 channels per leg: implies EMG)

let left_leg1_emg=LLEG1,LEFT_LEG1,L_LEG1,L_LEG_1
let left_leg1_emg=EEG_LLEG1,EEG_LEFT_LEG1,EEG_L_LEG1,EEG_L_LEG_1
let left_leg1_emg=EMG_LLEG1,EMG_LEFT_LEG1,EMG_L_LEG1,EMG_L_LEG_1
let left_leg2_emg=LLEG2,LEFT_LEG2,L_LEG2,L_LEG_2
let left_leg2_emg=EEG_LLEG2,EEG_LEFT_LEG2,EEG_L_LEG2,EEG_L_LEG_2
let left_leg2_emg=EMG_LLEG2,EMG_LEFT_LEG2,EMG_L_LEG2,EMG_L_LEG_2

let right_leg1_emg=RLEG1,RIGHT_LEG1,R_LEG1,R_LEG_1
let right_leg1_emg=EEG_RLEG1,EEG_RIGHT_LEG1,EEG_R_LEG1,EEG_R_LEG_1
let right_leg1_emg=EMG_RLEG1,EMG_RIGHT_LEG1,EMG_R_LEG1,EMG_R_LEG_1
let right_leg2_emg=RLEG2,RIGHT_LEG2,R_LEG2,R_LEG_2
let right_leg2_emg=EEG_RLEG2,EEG_RIGHT_LEG2,EEG_R_LEG2,EEG_R_LEG_2
let right_leg2_emg=EMG_RLEG2,EMG_RIGHT_LEG2,EMG_R_LEG2,EMG_R_LEG_2

% 2-lead EMG channels (pre-computed bilateral LATs and RATs)

%  assumption: requires that channel labels make referencing explicit

let left_leg_emg=LLeg1_LLeg2,lleg1_2
let left_leg_emg=EMG_LLEG_LLEG2,EMG_LLEG__LLEG_,EMG_LAT1_LAT2,LAT1_LAT2

let right_leg_emg=RLEG1_RLeg2,rleg1_2
let right_leg_emg=EMG_RLEG_RLEG2,EMG_RLEG__RLEG_,EMG_RAT1_RAT2,RAT1_RAT2

let left_right_leg_emg=lleg_r,lleg1_2,EMG_LLeg_RLeg

%

% Define transducer fields

% (first element = sets to this in final EDF)

%

let emg_transducer=EMG,EEG
let emg_transducer=EMG.Tibialis-Leg.Left,EMG.Tibialis-Leg.Right,.,Legs

let piezo_transducer=piezo,PiezoLeg,G13,Leg

let unknown_transducer=unknown,?,E,.

%

% Canonical rules

%

% EMG channels (4-lead), explicit channel names

LAT_emg
 req:
  sig=left_leg1_emg
  ref=left_leg2_emg
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV 

LAT_emg
 req:
  sig=left_leg1_emg
  ref=left_leg2_emg
  trans=emg_transducer  

RAT_emg
 req:
  sig=right_leg1_emg
  ref=right_leg2_emg
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

RAT_emg
 req: 
  sig=right_leg1_emg
  ref=right_leg2_emg
  trans=emg_transducer
  
% EMG channels (2-lead), explicit channel names

LAT_emg
 req:
  sig=left_leg_emg
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

LAT_emg
 req: 
  sig=left_leg_emg
  trans=emg_transducer
   
RAT_emg
 req:
  sig=right_leg_emg
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

RAT_emg
 req:
  sig=right_leg_emg
  trans=emg_transducer  

LAT_RAT_emg
 req:  
  sig=left_right_leg_emg
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

LAT_RAT_emg
 req:
  sig=left_right_leg_emg
  trans=emg_transducer

% EMG channels (2-lead), based on transducer field

LAT_emg
 req:
  sig=left_leg   
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

LAT_emg
 req: 
  sig=left_leg
  trans=emg_transducer

RAT_emg
 req:
  sig=right_leg
  trans=emg_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

RAT_emg
 req:
  sig=right_leg
  trans=emg_transducer

% Piezo channels (1 lead per leg), based on transducer field

LAT_piezo
 req:
  sig=left_leg
  trans=piezo_transducer 
  unit=mV
 set:
  unit=uV

LAT_piezo
 req:
  sig=left_leg
  trans=piezo_transducer

RAT_piezo
 req:
  sig=right_leg
  trans=piezo_transducer
  unit=mV  
 set:
  unit=uV

RAT_piezo
 req:
  sig=right_leg
  trans=piezo_transducer

% Generic

LAT_generic
 req:
  sig=left_leg
  trans=unknown_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

LAT_generic
 req:
  sig=left_leg
  trans=unknown_transducer

RAT_generic
 req:
  sig=right_leg
  trans=unknown_transducer
  unit=uV
  unit=mV
 set:
  unit=uV

RAT_generic
 req:
  sig=right_leg
  trans=unknown_transducer

LAT_RAT_emg
 req:
  sig=left_right_leg_emg
  trans=unknown_transducer

LEG_generic
 req:
  sig=leg_1
  ref=leg_2
  trans=unknown_transducer

LEG_generic
 req:
  sig=leg
  trans=piezo_transducer

%

% Compile

%

LAT <<- LAT_emg LAT_piezo LAT_generic

RAT <<- RAT_emg RAT_piezo RAT_generic
% -------------------------------------------------------------------------
%
% Misc. channels
%
% -------------------------------------------------------------------------


% Capnogram (capnography wave form)

let cap=cap,capno

cap
 req:
  sig = cap

% End tidal CO2 (derived value from capnography)

let EtCO2=EtCO2,CO2_EndTidal,EtC02,ETC2,ETCO2__,ETCO2_,EtCO2_2,ETCO2_Digital,EtCO2_Neo,EtCO2___NK,EtCO2__NK,EtCO2_XT,NK_EtCO2

EtCO2
 req:
  sig = EtCO2
  

let EtCO2_wave=EtCO2_Wave,ETCO2Wave,NK_EtCO2_Wave

EtCO2_wave
 req:
  sig = EtCO2_wave

%Transcutaneous CO2

let TcCO2=TcCO2__,TcCO2,TCCO2_,TCCO2_Digital,TCO2,TcpCO2

TcCO2
 req:
  sig = TcCO2
 
% Body position

pos
 req:
  sig = pos,position,Body,Pos_Sensor,Position_CU,PositionSen,PosSensor,Pt_Position
  sig = BPOSdc1,BPOSdc2,Compumedics_Body,POSdc,POSdc1,Compumedics_Posi
  sig = Positon,Postion,Postition,Bpos
  sig = Pro_Tech_Positio,ProTech_Positio,ProTechPositione
% -------------------------------------------------------------------------
%
% Sound recording / snore channels
%added P_snore from Stages, St. Lukes' PTAF's (nasal cannula) snore
% will need to clean up the snore signals, need a snore_cannula signal and a snore_mic signal
% went quickly through and divided them
% -------------------------------------------------------------------------

let snore_mic=snore,Snore_CU,Snore_EG,Snorealias,Snore_2,SNORE2,SNORE_DR,A_snore,snor,snore_mic
let snore=snore_mic_1,snoremic1,snoremic4,snore_sensor,snoresensor,Bipolar_Snore4,EEG_Snore
let snore_cannula=Cannula_Snore,P_snore,cannulasnore

sound
 req:
  sig = snore_mic
  sr-max = 500
  
snore
 req:
  sig = snore_cannula
% -------------------------------------------------------------------------
%
% CPAP channels 
%
% -------------------------------------------------------------------------

% most relevant to ABC, HomePAP, BestAIR studies

let cpap_flow=cpap_flow,pap_flow,CPAPFLOW,CPAP,CPAP.1,CPAP.2,CPAP.3,PAP.1,CFLO
let cpap_flow=CFlow,C-flow,PAPFlow,maskflow,Mask_Flow,PAP_Patient_Flow,EPAP,PAP_FLOW, PAP_Pt_Flow

let cpap_pres=pap_pres,Pmask,Pap,C-Pres,CPress,CPAP_Pressure,CPAPPressure,CPAP_Press
let cpap_pres=CPRES,C-Pressure,PAPPress,PAP_Pressure,PAP_Press
let cpap_pres=xPAP_EPAP,xPAP_IPAP,xPAP,xPAP_CPAP,Pressure
let cpap_pres=Mask,CPAPMask, C_Pressure

% rules

cpap_flow
 req:
  sig = cpap_flow
  unit = V,mV
  unit=liters_per_minute,L/m,l/l/min
  unit=unknown,.

cpap_pressure
 req:
  sig = cpap_pres, pap_pres,PAPPress
  unit = cmH20,mmH20
  unit = unknown,. 

  
